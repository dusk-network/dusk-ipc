// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.12.4
// source: ipc.proto

package bus

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IPCClient is the client API for IPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPCClient interface {
	Notify(ctx context.Context, opts ...grpc.CallOption) (IPC_NotifyClient, error)
	Close(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type iPCClient struct {
	cc grpc.ClientConnInterface
}

func NewIPCClient(cc grpc.ClientConnInterface) IPCClient {
	return &iPCClient{cc}
}

func (c *iPCClient) Notify(ctx context.Context, opts ...grpc.CallOption) (IPC_NotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &IPC_ServiceDesc.Streams[0], "/bus.IPC/Notify", opts...)
	if err != nil {
		return nil, err
	}
	x := &iPCNotifyClient{stream}
	return x, nil
}

type IPC_NotifyClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type iPCNotifyClient struct {
	grpc.ClientStream
}

func (x *iPCNotifyClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iPCNotifyClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iPCClient) Close(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/bus.IPC/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPCServer is the server API for IPC service.
// All implementations must embed UnimplementedIPCServer
// for forward compatibility
type IPCServer interface {
	Notify(IPC_NotifyServer) error
	Close(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedIPCServer()
}

// UnimplementedIPCServer must be embedded to have forward compatible implementations.
type UnimplementedIPCServer struct{}

func (UnimplementedIPCServer) Notify(IPC_NotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Notify not implemented")
}

func (UnimplementedIPCServer) Close(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedIPCServer) mustEmbedUnimplementedIPCServer() {}

// UnsafeIPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPCServer will
// result in compilation errors.
type UnsafeIPCServer interface {
	mustEmbedUnimplementedIPCServer()
}

func RegisterIPCServer(s grpc.ServiceRegistrar, srv IPCServer) {
	s.RegisterService(&IPC_ServiceDesc, srv)
}

func _IPC_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IPCServer).Notify(&iPCNotifyServer{stream})
}

type IPC_NotifyServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type iPCNotifyServer struct {
	grpc.ServerStream
}

func (x *iPCNotifyServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iPCNotifyServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IPC_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bus.IPC/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCServer).Close(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// IPC_ServiceDesc is the grpc.ServiceDesc for IPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bus.IPC",
	HandlerType: (*IPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Close",
			Handler:    _IPC_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notify",
			Handler:       _IPC_Notify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ipc.proto",
}
